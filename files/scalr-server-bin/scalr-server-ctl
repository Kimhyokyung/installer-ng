#!/bin/bash

set -o errexit

usage_and_exit () {
    echo "Usage: ctl [reconfigure | show-config | show-attributes | extras | config-test]"
    exit 1
}

check_file () {
    if [ ! -f "/etc/scalr-server/$1" ]; then
        return
    fi

    echo -n "Checking config file ($1) syntax ... "

    TMPFILE=$(mktemp)
    FAILED=0
    /opt/scalr-server/embedded/bin/ruby -c /etc/scalr-server/$1 >> $TMPFILE 2>&1 || FAILED=1

    if [ $FAILED -eq 1 ]; then
      echo -e "[ \033[31mFAILED\033[0m ]"
      cat $TMPFILE
      rm -f $TMPFILE
      exit 1
    else
      echo -e "[ \033[32mOK\033[0m ]"
      rm -f $TMPFILE
    fi
}

config_test () {
    check_file "scalr-server.rb"
    check_file "scalr-server-local.rb"
}

memory_test () {
    if [ "$(awk '/MemTotal/{print $2}' /proc/meminfo)" -lt 3600000 ]; then
        echo "Scalr requires a minimum of 4GB RAM to run."
        exit 1
    fi
}

if [ -z "$1" ]; then
    usage_and_exit
fi

if [ "x$1" = "xreconfigure" ]; then
    memory_test
    config_test

    echo "Preparing to reconfigure Scalr..."

    solo="dna"
elif [ "x$1" = "xshow-config" ]; then
    solo="show-config"
elif [ "x$1" = "xshow-attributes" ]; then
    solo="show-attributes"
elif [ "x$1" = "xextras" ]; then
    solo="extras"
elif [ "x$1" = "xconfig-test" ]; then
    config_test
else
    usage_and_exit
fi

# Unset all Ruby environment to ensure we execute in *our* Ruby environment.
unset RUBYOPT
unset BUNDLE_BIN_PATH
unset BUNDLE_GEMFILE
unset GEM_PATH
unset GEM_HOME

# Run chef-solo
shift

mkdir -p /opt/scalr-server/var/log/installer

exec /opt/scalr-server/embedded/bin/chef-solo \
    -c /opt/scalr-server/embedded/cookbooks/solo.rb \
    -j /opt/scalr-server/embedded/cookbooks/${solo}.json \
    "$@"

